// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package golang_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcServiceClient is the client API for GrpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServiceClient interface {
	GetOne(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (GrpcService_ServerStreamClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (GrpcService_ClientStreamClient, error)
	BiStream(ctx context.Context, opts ...grpc.CallOption) (GrpcService_BiStreamClient, error)
}

type grpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServiceClient(cc grpc.ClientConnInterface) GrpcServiceClient {
	return &grpcServiceClient{cc}
}

func (c *grpcServiceClient) GetOne(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/com.dealicious.grpc.GrpcService/getOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcServiceClient) ServerStream(ctx context.Context, in *Request, opts ...grpc.CallOption) (GrpcService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[0], "/com.dealicious.grpc.GrpcService/serverStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GrpcService_ServerStreamClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type grpcServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *grpcServiceServerStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (GrpcService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[1], "/com.dealicious.grpc.GrpcService/clientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceClientStreamClient{stream}
	return x, nil
}

type GrpcService_ClientStreamClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type grpcServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *grpcServiceClientStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcServiceClientStreamClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *grpcServiceClient) BiStream(ctx context.Context, opts ...grpc.CallOption) (GrpcService_BiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcService_ServiceDesc.Streams[2], "/com.dealicious.grpc.GrpcService/biStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServiceBiStreamClient{stream}
	return x, nil
}

type GrpcService_BiStreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type grpcServiceBiStreamClient struct {
	grpc.ClientStream
}

func (x *grpcServiceBiStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcServiceBiStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcServiceServer is the server API for GrpcService service.
// All implementations must embed UnimplementedGrpcServiceServer
// for forward compatibility
type GrpcServiceServer interface {
	GetOne(context.Context, *Request) (*Response, error)
	ServerStream(*Request, GrpcService_ServerStreamServer) error
	ClientStream(GrpcService_ClientStreamServer) error
	BiStream(GrpcService_BiStreamServer) error
	mustEmbedUnimplementedGrpcServiceServer()
}

// UnimplementedGrpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServiceServer struct {
}

func (UnimplementedGrpcServiceServer) GetOne(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (UnimplementedGrpcServiceServer) ServerStream(*Request, GrpcService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedGrpcServiceServer) ClientStream(GrpcService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedGrpcServiceServer) BiStream(GrpcService_BiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BiStream not implemented")
}
func (UnimplementedGrpcServiceServer) mustEmbedUnimplementedGrpcServiceServer() {}

// UnsafeGrpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServiceServer will
// result in compilation errors.
type UnsafeGrpcServiceServer interface {
	mustEmbedUnimplementedGrpcServiceServer()
}

func RegisterGrpcServiceServer(s grpc.ServiceRegistrar, srv GrpcServiceServer) {
	s.RegisterService(&GrpcService_ServiceDesc, srv)
}

func _GrpcService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.dealicious.grpc.GrpcService/getOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServiceServer).GetOne(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrpcService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GrpcServiceServer).ServerStream(m, &grpcServiceServerStreamServer{stream})
}

type GrpcService_ServerStreamServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type grpcServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *grpcServiceServerStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _GrpcService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServiceServer).ClientStream(&grpcServiceClientStreamServer{stream})
}

type GrpcService_ClientStreamServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type grpcServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *grpcServiceClientStreamServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcServiceClientStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GrpcService_BiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServiceServer).BiStream(&grpcServiceBiStreamServer{stream})
}

type GrpcService_BiStreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type grpcServiceBiStreamServer struct {
	grpc.ServerStream
}

func (x *grpcServiceBiStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcServiceBiStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcService_ServiceDesc is the grpc.ServiceDesc for GrpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.dealicious.grpc.GrpcService",
	HandlerType: (*GrpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getOne",
			Handler:    _GrpcService_GetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "serverStream",
			Handler:       _GrpcService_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "clientStream",
			Handler:       _GrpcService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "biStream",
			Handler:       _GrpcService_BiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
